{"version":3,"sources":["../src/browser-scripts.js"],"names":[],"mappings":"AAAA,YAAY,CAAA;;;;;;;;;;;;;;AAOL,SAAS,cAAc,GAAI;AAChC,MAAI,OAAO,IAAI,MAAM,EAAE;AACrB,kBAAc,CAAC,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,CAAA;AAC5C,WAAO,MAAM,CAAC,KAAK,CAAA;AACnB,QAAI,cAAc,IAAI,MAAM,EAAE;AAC5B,aAAO,MAAM,CAAC,YAAY,CAAA;KAC3B;GACF;CACF;;;;;;AAIM,SAAS,WAAW,GAAI;AAC7B,MAAI,MAAM,CAAC,YAAY,EAAE;AACvB,WAAO,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAA,MAAM,EAAI;AACvC,UAAI,MAAM,CAAC,OAAO,CAAC,YAAY,KAAK,MAAM,EAAE;AAAE,eAAO,MAAM,CAAA;OAAE;AAC7D,aAAO;AACL,cAAM,EAAE,MAAM,CAAC,MAAM;AACrB,eAAO,EAAE;AACP,aAAG,EAAE,MAAM,CAAC,OAAO,CAAC,WAAW;AAC/B,gBAAM,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM;AAC7B,oBAAU,EAAE,MAAM,CAAC,OAAO,CAAC,UAAU;AACrC,sBAAY,EAAE,wBAAwB;SACvC;OACF,CAAA;KACF,CAAC,CAAA;GACH,MAAM;AACL,WAAO,EAAE,CAAA;GACV;CACF;;;;;;AAIM,SAAS,YAAY,GAAI;AAC9B,SAAO,CAAC,UAAU,IAAI,EAAE;AACtB,UAAM,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,IAAI,EAAE,CAAA;AAC/C,UAAM,CAAC,KAAK,GAAG,IAAI,CAAA;AACnB,kBAAc,CAAC,SAAS,CAAC,IAAI,GAAG,YAAY;AAC1C,UAAM,MAAM,GAAG;AACb,cAAM,EAAE,EAAE,IAAI,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,AAAC,EAAE;AAC5C,eAAO,EAAE,IAAI;OACd,CAAA;;AAED,YAAM,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AAChC,aAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;KACnC,CAAA;GACF,CAAA,CAAE,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;CAClC","file":"browser-scripts.js","sourcesContent":["'use strict'\n\n/* global XMLHttpRequest */\n\n/**\n * Clean up function for removing the wrapped open method and removing gloabl variables.\n */\nexport function removeListener () {\n  if ('_open' in window) {\n    XMLHttpRequest.prototype.open = window._open\n    delete window._open\n    if ('httpRequests' in window) {\n      delete window.httpRequests\n    }\n  }\n}\n/**\n * Get the captured requests.\n */\nexport function getRequests () {\n  if (window.httpRequests) {\n    return window.httpRequests.map(record => {\n      if (record.request.responseType !== 'blob') { return record }\n      return {\n        timing: record.timing,\n        request: {\n          url: record.request.responseURL,\n          status: record.request.status,\n          statusText: record.request.statusText,\n          responseText: '{ \"blob\": \"redacted\" }'\n        }\n      }\n    })\n  } else {\n    return []\n  }\n}\n/**\n * Add the open listener by wrapping the current function.\n */\nexport function openListener () {\n  return (function (open) {\n    window.httpRequests = window.httpRequests || []\n    window._open = open\n    XMLHttpRequest.prototype.open = function () {\n      const record = {\n        timing: { init: (new Date().toISOString()) },\n        request: this\n      }\n\n      window.httpRequests.push(record)\n      return open.apply(this, arguments)\n    }\n  })(XMLHttpRequest.prototype.open)\n}\n"]}