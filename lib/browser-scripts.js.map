{"version":3,"sources":["../src/browser-scripts.js"],"names":[],"mappings":"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","file":"browser-scripts.js","sourcesContent":["'use strict'\n\n/* global XMLHttpRequest */\n\n/**\n * Clean up function for removing the wrapped open method and removing gloabl variables.\n */\nexport function removeListener () {\n  try {\n    if ('_open' in window) {\n      XMLHttpRequest.prototype.open = window._open\n      delete window._open\n      if ('httpRequests' in window) {\n        delete window.httpRequests\n      }\n    }\n  } catch (e) {\n    console.error(`Protractor Browser Interceptor removeListener error: `, e)\n  }\n}\n/**\n * Get the captured requests.\n */\nexport function getRequests () {\n  try {\n    if (window.httpRequests) {\n      return window.httpRequests.map(record => {\n        if (record.request.responseType !== 'blob') { return record }\n        return {\n          timing: record.timing,\n          request: {\n            url: record.request.responseURL,\n            status: record.request.status,\n            statusText: record.request.statusText,\n            responseText: '{ \"blob\": \"redacted\" }'\n          }\n        }\n      })\n    } else {\n      return []\n    }\n  } catch (e) {\n  console.error(`Protractor Browser Interceptor removeListener error: `, e)\n  }\n}\n/**\n * Add the open listener by wrapping the current function.\n */\nexport function openListener () {\n  try {\n    return (function (open) {\n      window.httpRequests = window.httpRequests || []\n      window._open = open\n      XMLHttpRequest.prototype.open = function () {\n        // NB window._Date is the \"real\" Date when we use lolex to advance browser time\n        function getTimeStamp () {\n          return (window._Date)\n            ? (new window._Date()).toISOString()\n            : (new Date()).toISOString()\n        }\n\n        const record = {\n          timing: { init: getTimeStamp() },\n          request: this\n        }\n\n\n        this.addEventListener('loadstart', function () { record.timing['loadstart'] = getTimeStamp() })\n        this.addEventListener('abort', function () { record.timing['abort'] = getTimeStamp() })\n        this.addEventListener('error', function () { record.timing['error'] = getTimeStamp() })\n        this.addEventListener('load', function () { record.timing['load'] = getTimeStamp() })\n        this.addEventListener('timeout', function () { record.timing['timeout'] = getTimeStamp() })\n        this.addEventListener('loadend', function () { record.timing['loadend'] = getTimeStamp() })\n\n        window.httpRequests.push(record)\n        return open.apply(this, arguments)\n      }\n    })(XMLHttpRequest.prototype.open)\n  } catch (e) {\n    console.error(`Protractor Browser Interceptor removeListener error: `, e)\n  }\n}\n"]}